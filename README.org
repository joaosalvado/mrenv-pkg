Simple rectangular tesselation of black and white image

* Method Overview
This package is able to tesselate grayscale images with right angle (90 degrees) rectangles.
Grayscale images have to come with a yaml file describing the meter to pixel resolution.
For instance, check the example maps descrived by the pair of files mrenv/maps/*.yaml and respective mrenv/maps/*.png.
This method samples a point on the image, then expands a rectangle around this point until it intersects with an obstacles.
This is repeated several times and those rectangles are stored and considered as obstacles on the next iterations.
* Note
This repo packages [[https://github.com/joaosalvado/mr_env][mrenv]] on a docker container
* Dependencies
- Docker
- Ubuntu: [[https://hub.docker.com/_/ubuntu/][ubuntu_docker_image]]
* Installation
#+begin_src shell
git clone git@github.com:joaosalvado/mr_env.git mrenv
cd thirdparty
git clone git@github.com:jbeder/yaml-cpp.git
cd ..
#+end_src
* Build
#+begin_src shell
sudo docker build -t mrenv .
#+end_src
* Run Docker Container
This extra running options are required to show opencv images.
#+begin_src shell
docker run -it --rm -e DISPLAY=$DISPLAY \
   -v /tmp/.X11-unix:/tmp/.X11-unix \
   --network=host \
   --volume=$(pwd) \
   --user=$(id -u $USER) \
   --workdir=/mrenv/build/src mrenv
#+end_src
* Executable
A simple tesselation can be constructed as seen in the executable source code below.
One is required to define the footprint of minimal rectangle and an image to tesselate.
Check folder maps/ on how to provide a .yaml and .png file to define a map
#+begin_src cpp
#include "../include/mrenv/Tesselation.h"

int main()
{
        // 0 - Parameters
        // 0.1 - Footprint
        int length = 1.5;
        int width = 1;
        // 0.2 - Map files that is in the maps/ folder
        std::string map_file = "map1.yaml";

        // 1 - Compute the polygon tesselaiton
        mrenv::Tesselation tessel;
        tessel.inputScenario(map_file, length, width);
        tessel.coverRectangles();
        tessel.plotBestCover();

        // 2 - Retrive a list of Rectangles
        auto rects  = tessel.getRectangles();

        return 0;
}
#+end_src
* Examples
Green rectangle in the top left corner is the minimal size rectangle accepted.
Note that the tesselation does not cover the entire white space. The method randomly samples and expands rectangles until they intersect with obstacles.
| [[images/map1.png]]          | [[images/basement.png]]       |
| [[images/map-corridors.png]] | [[images/map-partial-vi.png]] |


* License
<mrenv-pkg simple rectangular tesselation of grayslace images>
Copyright (C) 2022 Joao Salvado

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
